@model FlyTickets2025.web.Models.TicketViewModel
@using FlyTickets2025.web.Data.Entities

@{
    ViewData["Title"] = "Buy Ticket";
}

<h1>@ViewData["Title"]</h1>
<h4>Detalhes do Bilhete</h4>
<hr />

<div class="row">
    <div class="col-md-6">
        <form id="ticketForm" asp-action="Create" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            @* Hidden fields to send necessary IDs to the controller *@
            <input type="hidden" asp-for="FlightId" />
            <input type="hidden" asp-for="SeatId" id="SeatId" />
            <input type="hidden" asp-for="FinalPrice" id="FinalPrice" />

            @* Flight details section (from the new version) *@
            @if (Model.SelectedFlightDetails != null)
            {
                <div class="card card-body bg-light mb-3">
                    <h5>Voo Selecionado: @Model.SelectedFlightDetails.FlightNumber</h5>
                    <p>
                        De: @Model.SelectedFlightDetails.OriginCity?.AirportName<br />
                        Para: @Model.SelectedFlightDetails.DestinationCity?.AirportName<br />
                        Partida: @Model.SelectedFlightDetails.DepartureTime.ToString("dd-MM-yyyy HH:mm")
                    </p>
                </div>
            }

            @* Your original layout for the logged-in user's details, adapted to use the ViewModel *@
            <div class="form-group mb-3">
                <label class="control-label">Nome do Cliente</label>
                <input class="form-control" readonly value="@Model.CurrentUser?.Email" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Primeiro Nome</label>
                <input class="form-control" readonly value="@Model.CurrentUser?.FirstName" />
            </div>
            <div class="form-group mb-3">
                <label class="control-label">Sobrenome</label>
                <input class="form-control" readonly value="@Model.CurrentUser?.LastName" />
            </div>

            <hr />
            <h5>Dados do Passageiro</h5>

            <div class="form-group mb-3 form-check">
                <input type="checkbox" class="form-check-input" id="isForSelf" />
                <label class="form-check-label" for="isForSelf">A passagem é para mim</label>
            </div>

            @* Passenger details section (from the new version) *@
            <div class="form-group mb-3">
                <label asp-for="PassengerFullName" class="control-label"></label>
                <input asp-for="PassengerFullName" class="form-control" />
                <span asp-validation-for="PassengerFullName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="PassengerEmail" class="control-label"></label>
                <input asp-for="PassengerEmail" class="form-control" />
                <span asp-validation-for="PassengerEmail" class="text-danger"></span>
                <small class="form-text text-muted">Se o passageiro não tiver conta, uma será criada com este email.</small>
            </div>
            <div class="form-group mb-3">
                <label asp-for="PassengerDocumentType" class="control-label"></label>
                <select asp-for="PassengerDocumentType" class="form-control" asp-items="Html.GetEnumSelectList<DocumentType>()">
                    <option value="">-- Selecione --</option>
                </select>
                <span asp-validation-for="PassengerDocumentType" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="PassengerDocumentNumber" class="control-label"></label>
                <input asp-for="PassengerDocumentNumber" class="form-control" />
                <span asp-validation-for="PassengerDocumentNumber" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="PassengerType" class="control-label"></label>
                <select asp-for="PassengerType" class="form-control" asp-items="Html.GetEnumSelectList<PassengerType>()">
                    <option value="">-- Selecione --</option>
                </select>
                <span asp-validation-for="PassengerType" class="text-danger"></span>
            </div>
            <span asp-validation-for="SeatId" class="text-danger"></span>

            <div class="d-flex align-items-center gap-3">
                <input type="submit" value="Continuar para Pagamento" class="btn btn-primary" />
                <div>
                    <strong>Preço do Bilhete:</strong>
                    <span id="seatPriceDisplayForm">0,00 €</span>
                </div>
            </div>
        </form>
    </div>

    <div class="col-md-6">
        <h5>Assentos disponíveis</h5>
        <div id="seatGrid">
            @if (Model.AvailableSeats != null && Model.AvailableSeats.Any())
            {
                @foreach (var seat in Model.AvailableSeats)
                {
                    <button type="button" class="btn seat-button @(seat.IsAvailableForSale ? "seat-available" : "seat-unavailable") @(seat.Type == SeatClass.Executive ? "seat-executive" : "")"
                            data-seat-id="@seat.Id"
                            data-seat-value="@seat.Value"
                    @(seat.IsAvailableForSale ? "" : "disabled")>
                        @seat.SeatNumber
                    </button>
                }
            }
        </div>
        <div class="mt-3">
            <strong>Preço do Assento:</strong>
            <span id="seatPriceDisplayGrid">0,00 €</span>
        </div>
    </div>
</div>

<div class="mt-3">
    <a asp-controller="Flights" asp-action="HomeCatalog" class="btn btn-secondary">Voltar para a Lista de vôos</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener("DOMContentLoaded", () => {

            const checkbox = document.getElementById("isForSelf");
            const fullNameInput = document.getElementById("PassengerFullName");
            const emailInput = document.getElementById("PassengerEmail");

            // Correctly gets user details from the ViewModel
            const currentUserFullName = "@(Model.CurrentUser?.FirstName + " " + Model.CurrentUser?.LastName)";
            const currentUserEmail = "@Model.CurrentUser?.Email";

            function togglePassengerFields() {
                if (checkbox.checked) {
                    fullNameInput.value = currentUserFullName.trim();
                    emailInput.value = currentUserEmail;
                    fullNameInput.readOnly = true;
                    emailInput.readOnly = true;
                } else {
                    fullNameInput.value = "";
                    emailInput.value = "";
                    fullNameInput.readOnly = false;
                    emailInput.readOnly = false;
                }
            }
            checkbox.addEventListener("change", togglePassengerFields);

            // Your existing seat selection and pricing script
            const seatButtons = document.querySelectorAll(".seat-button.seat-available:not([disabled])");
            const seatPriceDisplayForm = document.getElementById("seatPriceDisplayForm");
            const seatPriceDisplayGrid = document.getElementById("seatPriceDisplayGrid");
            const seatIdInput = document.getElementById("SeatId");
            const form = document.getElementById("ticketForm");
            const passengerTypeSelect = document.querySelector("select[name='PassengerType']");
            let selectedSeatId = null;
            let baseSeatPrice = 0;

            function formatCurrency(value) {
                return value.toLocaleString("pt-PT", { style: "currency", currency: "EUR" });
            }

            function calculatePrice() {
                if (baseSeatPrice === 0) return 0;
                const type = passengerTypeSelect?.value || "";
                let multiplier = 1;
                if (type === "1") multiplier = 0.5;
                else if (type === "2") multiplier = 0;
                return baseSeatPrice * multiplier;
            }

            function updatePriceDisplay(value = null) {
                const newPrice = value !== null ? value : calculatePrice();
                const formattedPrice = formatCurrency(newPrice);
                seatPriceDisplayForm.textContent = formattedPrice;
                seatPriceDisplayGrid.textContent = formattedPrice;
                const finalPriceInput = document.getElementById("FinalPrice");
                if (finalPriceInput) {
                    finalPriceInput.value = newPrice.toFixed(2).replace(',', '.');
                }
            }

            function updateSelectedSeat(seatId, seatValue, clickedButton) {
                seatButtons.forEach(btn => btn.classList.remove("selected"));
                clickedButton.classList.add("selected");
                seatIdInput.value = seatId;
                selectedSeatId = seatId;
                baseSeatPrice = parseFloat(seatValue);
                updatePriceDisplay();
            }

            seatButtons.forEach(button => {
                button.addEventListener("click", () => {
                    const seatId = button.dataset.seatId;
                    const seatValue = button.dataset.seatValue;
                    updateSelectedSeat(seatId, seatValue, button);
                });
            });

            if (passengerTypeSelect) {
                passengerTypeSelect.addEventListener("change", () => updatePriceDisplay());
            }

            updatePriceDisplay(0);

            form.addEventListener('submit', function (event) {
                if (!selectedSeatId) {
                    event.preventDefault();
                    alert('Por favor, selecione um assento antes de comprar.');
                }
            });
        });
    </script>
}